<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://swsnr.de/feed.xml" rel="self" type="application/atom+xml" /><link href="https://swsnr.de/" rel="alternate" type="text/html" /><updated>2020-12-28T12:36:42+00:00</updated><id>https://swsnr.de/feed.xml</id><title type="html">Basti’s blog</title><subtitle>Just my personal blog.</subtitle><author><name>Basti</name><email>sebastian@swsnr.de</email></author><entry><title type="html">Wayland Hidpi</title><link href="https://swsnr.de/2020/12/13/wayland-hidpi.html" rel="alternate" type="text/html" title="Wayland Hidpi" /><published>2020-12-13T00:00:00+00:00</published><updated>2020-12-13T00:00:00+00:00</updated><id>https://swsnr.de/2020/12/13/wayland-hidpi</id><content type="html" xml:base="https://swsnr.de/2020/12/13/wayland-hidpi.html">&lt;h1 id=&quot;wayland--hidpi&quot;&gt;Wayland &amp;amp; HiDPI&lt;/h1&gt;

&lt;p&gt;So far I never really cared for the difference between X11 and wayland, but I recently realized that wayland supports semi HiDPI setups whereas X11 doesn’t.
And it also adds kinetic scrolling with touchpads.&lt;/p&gt;

&lt;p&gt;That’s nice!&lt;/p&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">Wayland &amp;amp; HiDPI So far I never really cared for the difference between X11 and wayland, but I recently realized that wayland supports semi HiDPI setups whereas X11 doesn’t. And it also adds kinetic scrolling with touchpads. That’s nice!</summary></entry><entry><title type="html">Links</title><link href="https://swsnr.de/2020/12/10/links.html" rel="alternate" type="text/html" title="Links" /><published>2020-12-10T00:00:00+00:00</published><updated>2020-12-10T00:00:00+00:00</updated><id>https://swsnr.de/2020/12/10/links</id><content type="html" xml:base="https://swsnr.de/2020/12/10/links.html">&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://latacora.micro.blog/2019/07/16/the-pgp-problem.html&quot;&gt;The PGP Problem&lt;/a&gt;: GPG seems to be a mess.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/FiloSottile/age&quot;&gt;FiloSottile/age&lt;/a&gt;:
  In related news there’s a command line tool to encrypt files.
  I still use encypted 7z files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/839395/&quot;&gt;GNU Autoconf 2.70 released&lt;/a&gt;:
  I’m surprised that this is still a thing :astonished:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">Links The PGP Problem: GPG seems to be a mess. FiloSottile/age: In related news there’s a command line tool to encrypt files. I still use encypted 7z files. GNU Autoconf 2.70 released: I’m surprised that this is still a thing :astonished:</summary></entry><entry><title type="html">Systemd Homed</title><link href="https://swsnr.de/2020/12/10/systemd-homed.html" rel="alternate" type="text/html" title="Systemd Homed" /><published>2020-12-10T00:00:00+00:00</published><updated>2020-12-10T00:00:00+00:00</updated><id>https://swsnr.de/2020/12/10/systemd-homed</id><content type="html" xml:base="https://swsnr.de/2020/12/10/systemd-homed.html">&lt;h1 id=&quot;systemd-homed&quot;&gt;systemd-homed&lt;/h1&gt;

&lt;p&gt;Observations from using systemd-homed for a couple of days:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;Overall systemd-homed works quite well; I like that my system now boots direct to GDM, no ugly LUKS password prompt anymore, and I like that every user now has an independent encryption password.&lt;/li&gt;
  &lt;li&gt;It doesn’t work well with btrfs though: It keeps complaining about having no space left on the device.&lt;/li&gt;
  &lt;li&gt;The Newbie Corner of the Arch Linux forums is not so newbie: I found the cause of this issue in &lt;a href=&quot;https://bbs.archlinux.org/viewtopic.php?pid=1922435#p1922435&quot;&gt;a thread&lt;/a&gt; there.&lt;/li&gt;
  &lt;li&gt;Even in Arch Linux it can take a long time for simple bugs to get fixed, see &lt;a href=&quot;https://bugs.archlinux.org/task/67658&quot;&gt;FS#67685&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;There are still some rough corners: For instance snapperd crashes when it tries to use user data of a homed user, see &lt;a href=&quot;https://github.com/openSUSE/snapper/issues/589&quot;&gt;https://github.com/openSUSE/snapper/issues/589&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;Incidentially even well-intentioned ideas such as clearing a password from memory are hard to get right in C.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all I’m quite happy and I really like the idea of homed; I think I’m going to stick with it.
I think this and many other ideas&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; from the systemd project are really steps in the right direction.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;As an aside I also really like &lt;a href=&quot;https://systemd.io/DISCOVERABLE_PARTITIONS/&quot;&gt;discoverable partitions&lt;/a&gt;; it’s just very convenient to define the purpose of a partition right when I create it and it makes installation Arch Linux a bit easier. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">systemd-homed Observations from using systemd-homed for a couple of days:</summary></entry><entry><title type="html">Arch Setup</title><link href="https://swsnr.de/2020/10/11/arch-setup.html" rel="alternate" type="text/html" title="Arch Setup" /><published>2020-10-11T00:00:00+00:00</published><updated>2020-10-11T00:00:00+00:00</updated><id>https://swsnr.de/2020/10/11/arch-setup</id><content type="html" xml:base="https://swsnr.de/2020/10/11/arch-setup.html">&lt;h1 id=&quot;my-arch-setup&quot;&gt;My Arch setup&lt;/h1&gt;

&lt;p&gt;I like Arch Linux and use it for my systems whereever possible.
In this post I’ll briefly go through my preferred Arch Linux setup.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I try to automate as much as possible with &lt;a href=&quot;https://github.com/lunaryorn/dotfiles/tree/main/playbooks&quot;&gt;Ansible Playbooks&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;partitioning-and-file-systems&quot;&gt;Partitioning and file systems&lt;/h2&gt;

&lt;p&gt;I usally have four partitions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A EFI system partition mounted at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/efi&lt;/code&gt;.
  The size depends: If I create it myself on a pristine system I use 512 MiB, but if I dual boot with Windows I use whatever size it had.&lt;/li&gt;
  &lt;li&gt;A extended boot partition mounted at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt; for Linux kernels.
  The size depends on whether the EFI system partition has free space or not.
  On dual boot systems Windows usually claims a large share of the system paritition so I make the boot parition larger, but it always has at least 512 MiB.
  This partition also uses FAT32 for EFI compatibility.&lt;/li&gt;
  &lt;li&gt;A LUKS-encrypted BTRFS root partition with about 20 to 30 GiB.
  I usally create dedicated BTRFS subvolumes for directories I want to exclude from snapshots (see below) or put a quota on, e.g.  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/tmp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/cache&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/log&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/flatpak/repo&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A LUKS-encrypted BTRFS home paritition filling the rest of the disk space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On some systems with plenty of disk space (my work laptop has 2 TB SSD storage) I tend to leave some unpartitioned space or emtpy partitions on the disk, just in case.
Sometimes I also add an extra LUKS-encrypted BTRFS partition for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/srv&lt;/code&gt;, on systems which will put a lot of data into this directory.&lt;/p&gt;

&lt;p&gt;Despite having three or four dedicated LUKS partitions I only need to enter a single passphrase at boot.  I use the same passphrase for all partitions; systemd asks me only for the passphrase for root, caches it in the kernel keyring on success and uses it to unlock all other partitions.
See &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-cryptsetup@.service.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-cryptsetup&lt;/code&gt;&lt;/a&gt; for more inforation.&lt;/p&gt;

&lt;p&gt;Every partition has a GUID according to the &lt;a href=&quot;https://systemd.io/DISCOVERABLE_PARTITIONS/&quot;&gt;Discoverable Partitions Specification&lt;/a&gt;.
This allows systemd &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd-gpt-auto-generator.html#&quot;&gt;to automatically discover, unlock and mount&lt;/a&gt; these partitions so I need neither &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt; nor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/crypttab&lt;/code&gt; nor any particular kernel parameters to boot from the encrypted rootfs disk.&lt;/p&gt;

&lt;p&gt;I have no swap partition; it’s 2020.&lt;/p&gt;

&lt;h2 id=&quot;bootloader&quot;&gt;Bootloader&lt;/h2&gt;

&lt;p&gt;I use systemd-boot; it does the job and is much simpler to setup and configure than Grub.
It can use two partitions for boot images and loader entries: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/efi&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt;; the latter needs to be FAT32 as well for this to work.
By default Arch Linux installs kernels and initramfs images to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt;; I do not fiddle with this and create the loader entries for these kernels on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I always put a &lt;a href=&quot;https://wiki.archlinux.org/index.php/Systemd-boot#Grml_on_ESP&quot;&gt;GRML rescue system&lt;/a&gt; on either of these partitions—not that I need it frequently but it is good to have it at hand just in case Arch Linux becomes unbootable or some messed up update forces me to restore a previous BTRFS snapshot (see below).
When dual-booting with Windows I add an extra 512 MiB to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt; and put the rescue system there to let Windows have full control of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/efi&lt;/code&gt;, whereas on Linux only systems I put it on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/efi&lt;/code&gt; and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt; only for Arch kernels.
The loader entry always looks the same and systemd-boot does not care where the image actually sits.&lt;/p&gt;

&lt;h2 id=&quot;snapshots-and-backups&quot;&gt;Snapshots and backups&lt;/h2&gt;

&lt;p&gt;One particularly useful feature of btrfs is its ability to take readonly snapshots of any subvolume; this greatly helps backups and recovery.
I always setup &lt;a href=&quot;http://snapper.io/&quot;&gt;snapper&lt;/a&gt;, following &lt;a href=&quot;https://wiki.archlinux.org/index.php/Snapper&quot;&gt;Arch’s excellent documentation&lt;/a&gt;.
Snapper provides services and timers to automatically take hourly read-only snapshots of BTRFS subvolumes, and helps to manage these or restore previous snapshots.&lt;/p&gt;

&lt;p&gt;For my root partition I use a configuration which keeps up to ten weekly snapshots, but I do not bother with monthly or even yearly snapshots:  If I messed up my system so bad that I had to go back an entire year I might just as well reinstall it right away.
I only let snapper do hourly snapshots of rootfs because I can anyway, because rootfs does not frequently change.
More important for rootfs is snappers ability to take “pre” and “post” snapshots around actions that modify the filesystem.
I manually take such snapshots whenever I make “risky” changes to the system, and install &lt;a href=&quot;https://github.com/wesbarnett/snap-pac&quot;&gt;snap-pac&lt;/a&gt; to automatically take snapshots around pacman updates.
This lets me roll back to the previous state of the system should a pacman update leave the system in a broken state.&lt;/p&gt;

&lt;p&gt;I also create a snapper configuration for my home directory; here I use the default configuration which keeps up to ten monthly and yearly snapshots.
For my home directory I’m less concerned about rolling back entirely, and more about recovering files or directories I accidentally deleted.
A nice tricks is also to take a writeable snapshots as home directory for a second user, to experiment with some software without touching the main user account.&lt;/p&gt;

&lt;p&gt;Backups depends very much on the system; for my systems at home I normally just use dejadup (a frontend to &lt;a href=&quot;https://www.nongnu.org/duplicity/&quot;&gt;duplicity&lt;/a&gt;) to backup to some network storage (e.g. my Synology NAS).
Dejadup is not particularly sophisticated but it does the job well and supports encrypted backup and network storage out of the box, which is helpful when the backup storage is not encrypted in and by itself (e.g. Dropbox or a share on a Synology NAS).
For other systems I use &lt;a href=&quot;https://github.com/wesbarnett/snap-sync&quot;&gt;snap-sync&lt;/a&gt; to directly send my snapper snapshots to a LUKS partition on an external drive.&lt;/p&gt;

&lt;h2 id=&quot;desktop&quot;&gt;Desktop&lt;/h2&gt;

&lt;p&gt;I use Gnome as my primary desktop environment, and actually enjoy Gnome 3.
I do have a working i3 configuration but I scarcly use it and do not even have i3 installed on most of my systems.&lt;/p&gt;

&lt;h2 id=&quot;pacman-flatpak-and-aur&quot;&gt;Pacman, flatpak and AUR&lt;/h2&gt;

&lt;p&gt;I install most packages with Pacman, but rely on Flatpak for some proprietary applications I prefer to have sandboxed, e.g Skype or Steam.&lt;/p&gt;

&lt;p&gt;Even though I use AUR packages a lot I do not like fully integrated AUR helpers like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yay&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead I put packages I built myself into a local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file:&lt;/code&gt; repository, and rely on &lt;a href=&quot;https://github.com/AladW/aurutils&quot;&gt;aurutils&lt;/a&gt; to automate this.
I normally use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aur sync -c&lt;/code&gt; which builds AUR packages in a clean chroot and adds them to the repo automatically, and then install the package with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pacman&lt;/code&gt; just like a package from the official repositories.&lt;/p&gt;

&lt;p&gt;Even though this is a tad more involved than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yay&lt;/code&gt; I find many benefits in this approach.
I just use pacman and do not get used to an AUR helper which I would then miss during install or in docker images, I do not have any foreign packages (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pacman -Qm&lt;/code&gt;) on my system, and I can easily &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; the repo around, e.g. to a HTTP server to make it available for other Arch systems.
This also lets me share built AUR packages between my systems so that I typically only need to build an AUR package once even though I install it on other systems as well.
Currently I do this manually but I am looking for ways to automate this.&lt;/p&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future work&lt;/h2&gt;

&lt;p&gt;I recently tried &lt;a href=&quot;https://systemd.io/HOME_DIRECTORY/&quot;&gt;systemd’s home directories&lt;/a&gt;.
I ran into &lt;a href=&quot;https://bugs.archlinux.org/task/67658&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;https://gitlab.gnome.org/GNOME/gnome-keyring/-/issues/59&quot;&gt;issues&lt;/a&gt;, and it still does not deliver all it promises.
No screen locker yet supports locking the home directory when locking the screen, for instance.&lt;/p&gt;

&lt;p&gt;I abandoned homed for now and still use conventional full disk encryption, but I will surely come back to homed once it matured.
I really like the idea of encrypting every home directory independently.
I think I would perhaps no longer need to encrypt rootfs; most of its contents come from public packages and even configuration files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc&lt;/code&gt; or data i &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var&lt;/code&gt; is usually not confidential.&lt;/p&gt;

&lt;p&gt;The real secrets lie in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; which homed protects better than full disk encryption does.
For rootfs integrity protection would be sufficient to detect tampering; combined with secure boot (with personal keys of course) this would likely result in a system that is hard to tamper with even for a determined attacker.
A casual attacker (e.g. when my laptop gets lost or stolen) would likely have not chance to tamper with the device or access my data.&lt;/p&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">My Arch setup I like Arch Linux and use it for my systems whereever possible. In this post I’ll briefly go through my preferred Arch Linux setup.</summary></entry><entry><title type="html">Utc Is The Worst</title><link href="https://swsnr.de/2018/09/16/utc-is-the-worst.html" rel="alternate" type="text/html" title="Utc Is The Worst" /><published>2018-09-16T00:00:00+00:00</published><updated>2018-09-16T00:00:00+00:00</updated><id>https://swsnr.de/2018/09/16/utc-is-the-worst</id><content type="html" xml:base="https://swsnr.de/2018/09/16/utc-is-the-worst.html">&lt;h1 id=&quot;utc-is-the-worst&quot;&gt;UTC is the Worst&lt;/h1&gt;

&lt;p&gt;UTC is the worst; and it’s &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Coordinated_Universal_Time&amp;amp;oldid=853902464#Future&quot;&gt;going to get way worse&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some time in the 22nd century, two leap seconds will be required every year.
The current use of only the leap second opportunities in June and December
will be insufficient, and the March and September options will have to be
used. In the 25th century, four leap seconds will be required every year, so
the current quarterly options will be insufficient. Thereafter there will need
to be the possibility of leap seconds at the end of any month. In about two
thousand years, even that will be insufficient, and there will have to be leap
seconds that are not at the end of a month. &lt;strong&gt;In a few tens of thousands of
years (the timing is uncertain), LOD will exceed 86,401 s, causing UTC to
require more than one leap second per day.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In 40.000 years People will hate us for three things: Global warming, Nuclear
waste, and UTC LEAP SECONDS!&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">UTC is the Worst UTC is the worst; and it’s going to get way worse: Some time in the 22nd century, two leap seconds will be required every year. The current use of only the leap second opportunities in June and December will be insufficient, and the March and September options will have to be used. In the 25th century, four leap seconds will be required every year, so the current quarterly options will be insufficient. Thereafter there will need to be the possibility of leap seconds at the end of any month. In about two thousand years, even that will be insufficient, and there will have to be leap seconds that are not at the end of a month. In a few tens of thousands of years (the timing is uncertain), LOD will exceed 86,401 s, causing UTC to require more than one leap second per day. In 40.000 years People will hate us for three things: Global warming, Nuclear waste, and UTC LEAP SECONDS!</summary></entry><entry><title type="html">Algebraic Data Types In Scala</title><link href="https://swsnr.de/2018/02/24/algebraic-data-types-in-scala.html" rel="alternate" type="text/html" title="Algebraic Data Types In Scala" /><published>2018-02-24T00:00:00+00:00</published><updated>2018-02-24T00:00:00+00:00</updated><id>https://swsnr.de/2018/02/24/algebraic-data-types-in-scala</id><content type="html" xml:base="https://swsnr.de/2018/02/24/algebraic-data-types-in-scala.html">&lt;h1 id=&quot;algebraic-data-types-in-scala&quot;&gt;Algebraic Data Types In Scala&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Object-Oriented Meets Functional&lt;br /&gt;
— &lt;cite&gt;Scala’s punchline, &lt;a href=&quot;https://scala-lang.org&quot;&gt;https://scala-lang.org&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scala claims to unite object-oriented and functional programming, and offers a rich set features from both worlds.
Developers coming from object-oriented languages—Java in particular—quickly adopt the object-oriented features of Scala but often struggle to find their way around functional programming.
Some aspects of functional programming found their way into object-oriented languages:  Higher order functions or combinators like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt; appear in today’s C# or Java code, and even a preference for immutable data structures spreads out into conventional object-oriented languages.&lt;/p&gt;

&lt;p&gt;But algebraic data types (ADTs) still do not appear in object-oriented programming although these enable the true power of functional programming:  Types well-founded on theory let us model the problem domain in types and thus help us write correct-by-construction code which provides a higher level of compile-time confidence than possible with the type systems of most object-oriented languages.
This article aims to help developers from object-oriented languages understand what it means, and become familiar with the basic set of algebraic data types commonly used in functional programming and its appearance in Scala.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;simple-types&quot;&gt;Simple Types&lt;/h2&gt;

&lt;p&gt;Developers from object-oriented programming languages often conflate “types” with “classes” but in fact represent a much simpler, yet more powerful concept.
For this article we define “type” as just a name for a &lt;em&gt;set of values&lt;/em&gt;.
We can define a &lt;em&gt;Boolean&lt;/em&gt; type with standard set notation now:&lt;/p&gt;

&lt;figure&gt;
V(Boolean) = {&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;}
&lt;/figure&gt;

&lt;p&gt;This type has just two values, the well-known boolean constants &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.
We can also define more complex types, eg, &lt;em&gt;Int&lt;/em&gt; for all integers, positive and negative:&lt;/p&gt;

&lt;figure&gt;
V(Int) = {n | n ∈ ℤ}
&lt;/figure&gt;

&lt;p&gt;Or a &lt;em&gt;String&lt;/em&gt; as sequence of characters where &lt;em&gt;Unicode&lt;/em&gt; denotes the set of all unicode code points:&lt;/p&gt;

&lt;figure&gt;
V(String) = {c&lt;sub&gt;0&lt;/sub&gt;c&lt;sub&gt;1&lt;/sub&gt;c&lt;sub&gt;2&lt;/sub&gt;… | c&lt;sub&gt;0&lt;/sub&gt;c&lt;sub&gt;1&lt;/sub&gt;c&lt;sub&gt;2&lt;/sub&gt;… ∈ Unicode}
&lt;/figure&gt;

&lt;h2 id=&quot;combined-types&quot;&gt;Combined Types&lt;/h2&gt;

&lt;p&gt;We can combine these simple types in two fundamental ways:
Either as a group of values of other types, ie, a &lt;em&gt;product type&lt;/em&gt;, or as an alternative between values of different types, ie, a &lt;em&gt;coproduct type&lt;/em&gt; or &lt;em&gt;sum type&lt;/em&gt;.
We can “calculate” with these types just like we can calculate sums and products of numbers, and these types obey similar laws.
We say they “form an algebra”, hence the name “algebraic data types”.&lt;/p&gt;

&lt;h3 id=&quot;product-types&quot;&gt;Product types&lt;/h3&gt;

&lt;p&gt;Formally we can define the &lt;em&gt;product&lt;/em&gt; of types&lt;sup id=&quot;fnref:product-type&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:product-type&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;em&gt;T&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, &lt;em&gt;T&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;, … as follows:&lt;/p&gt;

&lt;figure&gt;
V(P) = {C v&lt;sub&gt;1&lt;/sub&gt; v&lt;sub&gt;2&lt;/sub&gt; … | v&lt;sub&gt;1&lt;/sub&gt; ∈ T&lt;sub&gt;1&lt;/sub&gt; ∧ v&lt;sub&gt;2&lt;/sub&gt; ∈ T&lt;sub&gt;2&lt;/sub&gt; ∧ … }
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;C&lt;/em&gt; denotes the &lt;em&gt;constructor&lt;/em&gt; of the new type.
This constructor serves as a “tag” to differentiate between two product types combined of the same types.
With the help of this tag we can create two &lt;em&gt;different&lt;/em&gt; products of, eg, &lt;em&gt;Boolean&lt;/em&gt; and &lt;em&gt;Nat&lt;/em&gt;, by giving them different constructors.
The following type introduces a generic pair, for example, one of the most basic product types:&lt;/p&gt;

&lt;figure&gt;
⋀ S, T. V(Pair[S, T]) = {(s, t) | s ∈ V(S) ∧ t ∈ V(T)}
&lt;/figure&gt;

&lt;p&gt;We use the common infix notation &lt;em&gt;(v, t)&lt;/em&gt; by which pairs appear in almost all contemporary programming languages, from Python to Haskell.
Now &lt;em&gt;(42, “Donald Duck”)&lt;/em&gt; becomes a value of the type &lt;em&gt;Pair[Int, String]&lt;/em&gt;.
By using a different constructor we can also give this generic pair a special name, like &lt;em&gt;User&lt;/em&gt; with an ID and a name:&lt;/p&gt;

&lt;figure&gt;
V(User) = { User i s | i ∈ V(Int) ∧ s ∈ V(String)}
&lt;/figure&gt;

&lt;p&gt;We follow the convention to name the constructor like the type, but we can also choose different names for each.
This new type combines the &lt;em&gt;same&lt;/em&gt; types as &lt;em&gt;Pair[Int, String]&lt;/em&gt; but holds &lt;em&gt;different&lt;/em&gt; values and thus becomes distinct from a pair.
&lt;em&gt;User 42 “Donald Duck”&lt;/em&gt; is a value of type &lt;em&gt;User&lt;/em&gt;, but not of &lt;em&gt;Pair[Int, String]&lt;/em&gt;,&lt;/p&gt;

&lt;h3 id=&quot;sum-types&quot;&gt;Sum types&lt;/h3&gt;

&lt;p&gt;Like a product combines values of different types at the same time a &lt;em&gt;sum&lt;/em&gt; type&lt;sup id=&quot;fnref:sum-type&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:sum-type&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; provides an alternative between values of different types.
Formally we can define a &lt;em&gt;sum&lt;/em&gt; of types &lt;em&gt;T&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, &lt;em&gt;T&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;, … as follows:&lt;/p&gt;

&lt;figure&gt;
V(S) = {C&lt;sub&gt;1&lt;/sub&gt; v&lt;sub&gt;1&lt;/sub&gt; | v&lt;sub&gt;1&lt;/sub&gt; ∈ T&lt;sub&gt;1&lt;/sub&gt;} ∪ {C&lt;sub&gt;2&lt;/sub&gt; v&lt;sub&gt;2&lt;/sub&gt; | v&lt;sub&gt;2&lt;/sub&gt; ∈ T&lt;sub&gt;2&lt;/sub&gt;} ∪ …
&lt;/figure&gt;

&lt;p&gt;Again &lt;em&gt;C&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt;, &lt;em&gt;C&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt;, … denote constructors where each constructor lifts another constituent type to the sum type.
We can now define the common &lt;em&gt;Either&lt;/em&gt; type, as an alternative between two types:&lt;/p&gt;

&lt;figure&gt;
⋀ L, R. V(Either[L, R]) = {Left l | l ∈ V(L)} ∪ {Right r | r ∈ V(R)}
&lt;/figure&gt;

&lt;p&gt;Now we can use the type &lt;em&gt;Either[String, User]&lt;/em&gt; to represent the result of finding a user in a database.
In case of error we return &lt;em&gt;Left “User not found”&lt;/em&gt;—which strictly speaking is of type &lt;em&gt;Either[String, T]&lt;/em&gt; for any &lt;em&gt;T&lt;/em&gt;—otherwise we return &lt;em&gt;Right user&lt;/em&gt; where &lt;em&gt;user&lt;/em&gt; is a value of type &lt;em&gt;User&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;types-in-scala&quot;&gt;Types in Scala&lt;/h2&gt;

&lt;p&gt;In Scala we can already use pairs and tuples—the standard library includes these—and we can also define our own products with &lt;em&gt;case classes&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Donald Duck&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Donald&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Donald Duck&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Donald&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Scala also supports sum type, but lacks a syntax for these.
A sum type like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt; looks straight-forward in Haskell:&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same definition in Scala looks considerable more noisy&lt;sup id=&quot;fnref:either&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:either&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This illustrates the common pattern to define sum types in Scala:  In the absence of first-level support for sum types we must exploit subtyping to achieve the effect of sum types.&lt;/p&gt;

&lt;p&gt;We define the type itself as a &lt;em&gt;sealed&lt;/em&gt; trait.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed&lt;/code&gt; keyword forces us to define all subtypes in the same file as the trait and thus allows the Scala compiler to subsequently warn if a pattern match over the type does not match all subtypes (“exhaustiveness check”)&lt;sup id=&quot;fnref:abstract&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:abstract&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.
Then we define each branch of the sum as distinct subclass of the trait, and use the corresponding type parameter as type for the value of either side.
This use of subtyping has important implications for the ergonomics of the type which we will cover in the section after the next.&lt;/p&gt;

&lt;h2 id=&quot;shapes-of-generic-types&quot;&gt;Shapes of generic types&lt;/h2&gt;

&lt;p&gt;If we look at the types in the previous section we notice some similiarity between product types.
A &lt;em&gt;Pair[Int, String]&lt;/em&gt; and our &lt;em&gt;User&lt;/em&gt; type have the same &lt;em&gt;shape&lt;/em&gt;: Apart from their constructors they have the same values.
In fact constructors exist just to introduce an “artificial” distinction between otherwise equal sums or products of types, and thus allow us to give different names to the same type to aid understanding of our programs.
But we can “omit” the constructors and abstract over the shape of these types.&lt;/p&gt;

&lt;p&gt;This leads us to the famous [Shapeless][] library for Scala which provides types to abstract over the shape of algebraic data types.
At the core of Shapeless lies a special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HList&lt;/code&gt; type for a heterogenous list—a list where each element has a different type:&lt;/p&gt;

&lt;figure&gt;
⋀ L. V(Left[L]) = {Left l | l ∈ V(L)}&lt;br /&gt;
⋀ R. V(Right[R]) = {Right r | r ∈ V(R)}&lt;br /&gt;
⋀ L, R. V(Either[L, R]) = V(Left[L]) ∪ V(Right[R])
&lt;/figure&gt;

&lt;p&gt;In other words, each alternative of a sum type becomes a &lt;em&gt;distinct&lt;/em&gt; type.
The expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Left(&quot;Foo&quot;)&lt;/code&gt; has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Left[String]&lt;/code&gt; for an arbitrary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either[String, R]&lt;/code&gt;.
We can then &lt;em&gt;widen&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Left[String]&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either[Left, R]&lt;/code&gt; by invoking the subtype relation.
The compiler automatically widens co-variant types&lt;sup id=&quot;fnref:variance&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:variance&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; but often we do not wish for automatic widening; in particular automatic widening complicates implicit search which in turn impacts type class resolution so libraries like cats and scalaz made most of their types invariant to prevent automatic widening to subtypes.&lt;/p&gt;

&lt;p&gt;With invariant types we can find ourselves in a situation where the compiler infers the subtype, ie, a sum-type variant like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Left&lt;/code&gt;, but needs the base type, ie, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt;.
The following (simplified) example with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionT&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EitherT&lt;/code&gt;—both invariant&lt;sup id=&quot;fnref:either-variance&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:either-variance&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;—does not compile, for instance:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.data._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.Id&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sum&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sum&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EitherT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Sum&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;OptionT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The compiler complains:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type mismatch;
 found   : cats.data.EitherT[cats.Id,A.type,Int]
 required: cats.data.EitherT[cats.Id,Sum,Int]
Note: A.type &amp;lt;: Sum, but class EitherT is invariant in type A.
You may wish to define A as +A instead. (SLS 4.5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We must explicitly downcast to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sum&lt;/code&gt; with a type ascription to make the code compile:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;OptionT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This issue appears frequently and thus impacts the ergonomics of sum types in Scala, in particular when it causes much worse and less understandable compiler errors than the one above.
It appears so frequently that cats and scalaz even have their own family of functions to help with subtyping.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Functor&lt;/code&gt; type also provides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;widen&lt;/code&gt; to widen the type of the functor argument:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; A.some.widen
res10: Option[A.type] = Some(A)
&amp;gt; A.some.widen[Sum]
res11: Option[Sum] = Some(A)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Likewise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BiFunctor&lt;/code&gt; (a functor with two “sides”, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt;) also has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leftWiden&lt;/code&gt; which we can use instead of the type ascription above&lt;sup id=&quot;fnref:unification&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:unification&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;OptionT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;pure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;leftWiden&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While these functions provide some convenience to cope with subtyping, all in all ergonomics of sum types often falls short of what other functional languages like Haskell—which lack subtyping—can provide.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Product types combine different types into a new type; sum types describe an alternative of other types.
In Scala the former appear as simple and well-known case classes, whereas the latter have a more intricate representation as subtypes of sealed traits or classes.
In some cases this subtyping in sum types interferes with type inference and invariance which makes ADTs in Scala less ergonomic than in other languages like Haskell.
Algebraic data types have similar shapes, and we can abstract over these shapes to write generic programs over all kinds of sum or product types.
The famous shapeless library provides the necessary infrastructure for this abstraction—in particular a heterogeneous list type as generalization of tuples and generic types to convert concrete algebraic types into the corresponding heterogeneous list.&lt;/p&gt;

&lt;p&gt;We hope that this article helped you understand how algebraic data types work, how they appear in Scala, and what the shapeless library contributes to generic programming.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:product-type&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The name “product type” originates from a branch of mathematics called “category theory” a denotes a fundamental way to combine objects in a category.
A product type resembles this combination with regards to programming language types, hence the name.
We spare category theory in this article—&lt;a href=&quot;https://bartoszmilewski.com/2015/01/07/products-and-coproducts/&quot;&gt;Products and Coproducts&lt;/a&gt; from &lt;a href=&quot;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&quot;&gt;Category Theory for Programmers&lt;/a&gt; by &lt;a href=&quot;https://bartoszmilewski.com/about/&quot;&gt;Bartosz Milewski&lt;/a&gt; provides a gentle introduction to products and coproducts in category theory—but a look at the size of (the set of values of) a product type in relation to the sizes its constituent types gives an intuition about the meaning of the name “product type”.
We observe that the size of the product type in fact equals the &lt;em&gt;product&lt;/em&gt; of the sizes of its constituent types: |V(P)| = |V(T&lt;sub&gt;1&lt;/sub&gt;)| · |V(T&lt;sub&gt;2&lt;/sub&gt;)| · … &lt;a href=&quot;#fnref:product-type&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sum-type&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;We observe that the size of a sum type follows a similar analogy as the size of a product type.
A sum type has just as many values as the sum of its constituent types: |V(S)| = |V(T&lt;sub&gt;1&lt;/sub&gt;)| + |V(T&lt;sub&gt;2&lt;/sub&gt;)| + ….
The more formal name &lt;em&gt;co-product&lt;/em&gt; originates from category theory as well.
The prefix &lt;em&gt;co-&lt;/em&gt; indicates that category theory considers a sum in some ways as the opposite of a product. &lt;a href=&quot;#fnref:sum-type&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:either&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;We simplify the definition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt; for this article.
In particular we omit all methods on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt; and elide variance annotations.
For the actual definition see &lt;a href=&quot;https://github.com/scala/scala/blob/v2.12.4/src/library/scala/util/Either.scala#L1&quot;&gt;scala.util.Either&lt;/a&gt;. &lt;a href=&quot;#fnref:either&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:abstract&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Instead of a trait we can use a sealed &lt;em&gt;abstract&lt;/em&gt; class—in case we need to pass values to the base class, because Scala does not support trait parameters yet.
Dotty will add these to Scala. &lt;a href=&quot;#fnref:abstract&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:variance&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The article &lt;a href=&quot;https://typelevel.org/blog/2016/02/04/variance-and-functors.html&quot;&gt;Of variance and functors&lt;/a&gt; provides an in-depth explanation of variance and its effects in types. &lt;a href=&quot;#fnref:variance&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:either-variance&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;We cannot use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt; in this example—historically Scala made &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either&lt;/code&gt; covariant. &lt;a href=&quot;#fnref:either-variance&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:unification&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This code makes use of partial unification, see &lt;a href=&quot;https://typelevel.org/cats/faq.html#si-2712&quot;&gt;Cats FAQ&lt;/a&gt;. &lt;a href=&quot;#fnref:unification&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">Algebraic Data Types In Scala Object-Oriented Meets Functional — Scala’s punchline, https://scala-lang.org Scala claims to unite object-oriented and functional programming, and offers a rich set features from both worlds. Developers coming from object-oriented languages—Java in particular—quickly adopt the object-oriented features of Scala but often struggle to find their way around functional programming. Some aspects of functional programming found their way into object-oriented languages: Higher order functions or combinators like map and filter appear in today’s C# or Java code, and even a preference for immutable data structures spreads out into conventional object-oriented languages. But algebraic data types (ADTs) still do not appear in object-oriented programming although these enable the true power of functional programming: Types well-founded on theory let us model the problem domain in types and thus help us write correct-by-construction code which provides a higher level of compile-time confidence than possible with the type systems of most object-oriented languages. This article aims to help developers from object-oriented languages understand what it means, and become familiar with the basic set of algebraic data types commonly used in functional programming and its appearance in Scala.</summary></entry><entry><title type="html">Soap A Convenient Interface</title><link href="https://swsnr.de/2018/01/09/soap-a-convenient-interface.html" rel="alternate" type="text/html" title="Soap A Convenient Interface" /><published>2018-01-09T00:00:00+00:00</published><updated>2018-01-09T00:00:00+00:00</updated><id>https://swsnr.de/2018/01/09/soap-a-convenient-interface</id><content type="html" xml:base="https://swsnr.de/2018/01/09/soap-a-convenient-interface.html">&lt;h1 id=&quot;soap-a-convenient-interface&quot;&gt;SOAP, a convenient interface&lt;/h1&gt;

&lt;p&gt;Last week I got a big PDF with documentation about the
almost-but-not-quite-entirely-unlike-REST HTTP API of an external partner. In
the section about restrictions of their HTTP API:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For this functionality we recommend to use the SOAP API.
This &lt;em&gt;convenient&lt;/em&gt; interface offers almost &lt;em&gt;unlimited&lt;/em&gt; possibilities to integrate Foo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Emphasis mine.  I have &lt;a href=&quot;http://harmful.cat-v.org/software/xml/soap/simple&quot;&gt;different memories&lt;/a&gt; of SOAP.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">SOAP, a convenient interface Last week I got a big PDF with documentation about the almost-but-not-quite-entirely-unlike-REST HTTP API of an external partner. In the section about restrictions of their HTTP API: For this functionality we recommend to use the SOAP API. This convenient interface offers almost unlimited possibilities to integrate Foo. Emphasis mine. I have different memories of SOAP.</summary></entry><entry><title type="html">Decode Irregular Json With Circe.en</title><link href="https://swsnr.de/2017/12/10/decode-irregular-json-with-circe.en.html" rel="alternate" type="text/html" title="Decode Irregular Json With Circe.en" /><published>2017-12-10T00:00:00+00:00</published><updated>2017-12-10T00:00:00+00:00</updated><id>https://swsnr.de/2017/12/10/decode-irregular-json-with-circe.en</id><content type="html" xml:base="https://swsnr.de/2017/12/10/decode-irregular-json-with-circe.en.html">&lt;h1 id=&quot;decode-irregular-json-with-circe&quot;&gt;Decode irregular JSON with Circe&lt;/h1&gt;

&lt;p&gt;The popular CI server &lt;a href=&quot;https://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt; has a JSON API to access
builds, but its JSON has a rather strange shape:  Relevant information sits in a
generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions&lt;/code&gt; array containing objects of various different shapes (even
empty objects for whatever reason):&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-json&quot;&gt;The JSON&lt;/h2&gt;

&lt;p&gt;The array looks as follows (converted to YAML and stripped of some irrelevant
parts):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SERVICE_BUILD&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2840'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# […]&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GIT_COMMIT&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;922cc937eb9c9142ebf0d8672a2b13f5fd28ae3e&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;causes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;buildsByBranchName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;refs/remotes/origin/master&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# …&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;lastBuiltRevision&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;922cc937eb9c9142ebf0d8672a2b13f5fd28ae3e&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SHA1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;922cc937eb9c9142ebf0d8672a2b13f5fd28ae3e&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;refs/remotes/origin/master&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scmName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are interested in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastBuiltRevision.SHA1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;decode-actions-into-a-scala-adt&quot;&gt;Decode actions into a Scala ADT&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;https://circe.github.io/circe/&quot;&gt;Circe&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decoder&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastBuiltRevision&lt;/code&gt; is straigt-forward:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.circe._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LastBuiltRevision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LastBuiltRevision&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastBuiltRevisionDecoder&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LastBuiltRevision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;forProduct1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHA1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LastBuiltRevision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions&lt;/code&gt; we create an ADT modelling all shapes we’re interested in and
define an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actionDecoder&lt;/code&gt; which simplies tries all possible shapes until one
fits, via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decoder.or&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastBuiltRevision&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LastBuiltRevision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gitDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;forProduct1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lastBuiltRevision&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parameter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parameterDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;forProduct2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parametersDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;forProduct1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parameters&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actionDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cats.syntax.functor._&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;widen&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;widen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to explicitly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;widen&lt;/code&gt; each decoder to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decoder[Action]&lt;/code&gt;—Circe decoders
are invariant.&lt;/p&gt;

&lt;h2 id=&quot;skip-over-unknown-actions&quot;&gt;Skip over unknown actions&lt;/h2&gt;

&lt;p&gt;We gracefully ignore unknown objects in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions&lt;/code&gt; with another level of
indirection: An ADT that either represents a known action or the raw JSON of an
unknown object:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MaybeAction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MaybeAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Known&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MaybeAction&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MaybeAction&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;maybeActionDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MaybeAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Known&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;decode-a-build&quot;&gt;Decode a build&lt;/h2&gt;

&lt;p&gt;We can now decode an entire build into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build&lt;/code&gt; case class and collect all
known actions:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MaybeAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;knownActions&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MaybeAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Known&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buildDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;forProduct1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;actions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;decode-coproducts-of-actions&quot;&gt;Decode coproducts of actions&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actionDecoder&lt;/code&gt; lists all variants explicitly.  With &lt;a href=&quot;https://github.com/milessabin/shapeless&quot;&gt;Shapeless&lt;/a&gt; we can
reduce the boilerplate and define a generic decoder over all variants of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt;: The trait is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed&lt;/code&gt;, so all variants are known at compilation time
and can be introspected with type-level programming.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt; trait is equivalent to the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shapeless.Coproduct&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Git&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:+:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:+:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shapeless&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;CNil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which reads as as ”either an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action.Git&lt;/code&gt; or an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action.Parameters&lt;/code&gt;”.
A value of this type, eg, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action.Parameters&lt;/code&gt; value, looks as follows:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Inr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Inl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which reads as “skip the first product alternative (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inr&lt;/code&gt;) and move on to the
next alternative which has a value (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inl&lt;/code&gt;)”.&lt;/p&gt;

&lt;p&gt;We can recursively define a decoder for a Coproduct of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt;s:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cnilDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CNil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DecodingFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CNil&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cconsActionDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Coproduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decodeH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decodeT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:+:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;decodeH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Inl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decodeT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Inr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;H&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNil&lt;/code&gt; is the recursion anchor; it serves as a base case for this inductive
definition, however a coproduct will never have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNil&lt;/code&gt; value at runtime.  In
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cconsActionDecoder&lt;/code&gt; step we try to decode to the type of the current
coproduct position or fall back to decode the remaining coproduct positions, and
the lift the result back to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Coproduct&lt;/code&gt; by applying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inr&lt;/code&gt;
constructors to both cases. We define the implicit privately to not let them
leak into other scopes and wreck havoc of implicit resultions.&lt;/p&gt;

&lt;h2 id=&quot;decode-actions-from-coproducts&quot;&gt;Decode actions from coproducts&lt;/h2&gt;

&lt;p&gt;We still need to go from a coproduct of action alternatives to the actual
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Action&lt;/code&gt; type, by means of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shapeless.Generic&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genericActionDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Repr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Coproduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genericAction&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Generic.Aux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Repr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decodeRepr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Repr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decodeRepr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;genericAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actionDecoder&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;genericActionDecoder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As said above the generic representation of a sealed trait is a coproduct; we
can seamlessly convert between a sealed trait and coproduct of values of that
trait; in this case we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Generic&lt;/code&gt; to move from a coproduct to the action
type itself.  Again, the decoder is private to not leak it into other scopes.&lt;/p&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">Decode irregular JSON with Circe The popular CI server Jenkins has a JSON API to access builds, but its JSON has a rather strange shape: Relevant information sits in a generic actions array containing objects of various different shapes (even empty objects for whatever reason):</summary></entry><entry><title type="html">Emacs Script Pitfalls</title><link href="https://swsnr.de/2014/08/12/emacs-script-pitfalls.html" rel="alternate" type="text/html" title="Emacs Script Pitfalls" /><published>2014-08-12T00:00:00+00:00</published><updated>2014-08-12T00:00:00+00:00</updated><id>https://swsnr.de/2014/08/12/emacs-script-pitfalls</id><content type="html" xml:base="https://swsnr.de/2014/08/12/emacs-script-pitfalls.html">&lt;h1 id=&quot;emacs-script-pitfalls&quot;&gt;Emacs script pitfalls&lt;/h1&gt;

&lt;p&gt;Emacs isn’t just an editor, it’s an entire Emacs Lisp interpreter and
environment.  We can use Emacs Lisp not only to extend and customize our beloved
editor, but also to write entire programs and applications.  Nic Ferrier’s
&lt;a href=&quot;https://github.com/nicferrier/elnode&quot;&gt;elnode&lt;/a&gt; server is the most ambitious Emacs Lisp application of this sort, but
we can start at a smaller scale and try to write our shell scripts and tools
with Emacs Lisp.&lt;/p&gt;

&lt;p&gt;However, it turns out that writing programs in Emacs Lisp is more intricate than
it looks at a first glance.  Emacs decades-long history as interactive
application have left deep marks in Emacs and Emacs Lisp, which make independent
noninteractive scripts difficult.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;making-emacs-lisp-scripts-executable&quot;&gt;Making Emacs Lisp scripts executable&lt;/h2&gt;

&lt;p&gt;Nowadays Emacs has a convenient &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--script&lt;/code&gt; option to load and evaluate a
specific file&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, but how to make a proper shebang out of it?  The naive
approach won’t do:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/usr/bin/emacs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;--script&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Emacs is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;, and its location varies between different systems.
There may even be different Emacs versions at different places.  For instance,
on OS X &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/emacs&lt;/code&gt; is an outdated Emacs 22, and the “real” Emacs is
typically installed via Homebrew at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin/emacs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Normally, we’d accommodate these differences with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/env&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/usr/bin/env&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;--script&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this just raises another portability issue:  Linux doesn’t split arguments
in the shebang, and sends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emacs --script&lt;/code&gt; as a &lt;em&gt;single&lt;/em&gt; argument to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/env&lt;/code&gt;, which doesn’t really do the trick.&lt;/p&gt;

&lt;p&gt;To make our script executable in a portable and reliable way, we need to resort
to some dirty trickery&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;emacs &lt;span class=&quot;nt&quot;&gt;--script&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# -*- mode: emacs-lisp; lexical-binding: t; -*-&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This wraps the Emacs Lisp code into a POSIX shell script which calls out to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emacs&lt;/code&gt; with appropriate arguments.  The semicolon in the second line hides the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec&lt;/code&gt; statement from Emacs, and the no-op colon statement turns this into a
proper sequence statement for the shell.  The colon in turn is quoted to make it
appear as string literal to Emacs Lisp.&lt;/p&gt;

&lt;p&gt;Eventually some file local variables tell Emacs to use Emacs Lisp Mode for the
script, regardless of the shebang, and to enable lexical binding.&lt;/p&gt;

&lt;p&gt;This particularly evil trick works reliably with any POSIX shell.  Even better,
we can now pass arbitrary arguments to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emacs&lt;/code&gt; executable, which allows us
to get rid of a little nuisance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--script&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;inhibiting-site-start&quot;&gt;Inhibiting site-start&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#index-g_t_002d_002dscript-4535d&quot;&gt;–script&lt;/a&gt; option is just a shortcut for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--batch -l&lt;/code&gt;, i.e. enter batch
mode and load the given file.  Batch Mode mainly means that Emacs will not
create a frame, but instead exit after processing all command line arguments
(which includes evaluating our script).  Besides, &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#index-g_t_002d_002dbatch-4534&quot;&gt;–batch&lt;/a&gt; also disables the
user initialization file.  However, it still processes the global site
initialization file:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--batch&lt;/code&gt; implies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-q&lt;/code&gt; (do not load an initialization file), but
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site-start.el&lt;/code&gt; is &lt;em&gt;loaded nonetheless&lt;/em&gt;. It also causes Emacs to exit
after processing all the command options. In addition, it disables auto-saving
except in buffers for which auto-saving is explicitly requested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The global site initialization is often a kitchen sink which sets up globally
installed packages and adds many seconds to Emacs’ startup time in the worst
case.  Besides, it’s not really a good idea to load arbitrary packages before
our script even gets a chance to run.&lt;/p&gt;

&lt;p&gt;We can opt out of the global site initialization by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--quick&lt;/code&gt; to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emacs&lt;/code&gt; options of our script, which gives us a bare-bones Emacs without any
initialization:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*- mode: emacs-lisp; lexical-binding: t; -*-&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you need to, you can still load the global site initialization &lt;em&gt;explicitly&lt;/em&gt;
from &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#index-site_002drun_002dfile&quot;&gt;site-run-file&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;site-run-file&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'no-error&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'no-message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;processing-command-line-arguments&quot;&gt;Processing command line arguments&lt;/h2&gt;

&lt;p&gt;Emacs exposes the command line arguments in &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html#index-command_002dline_002dargs_002dleft&quot;&gt;command-line-args-left&lt;/a&gt; alias
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt;&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*- mode: emacs-lisp; lexical-binding: t; -*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello: %S&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el 'John Doe'
Hello: (&quot;John Doe&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Passing options doesn’t work that well, though:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el --greeting 'Good morning %s!' 'John Doe'
Hello: (&quot;--greeting&quot; &quot;Good morning %s!&quot; &quot;John Doe&quot;)
Unknown option `--greeting'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Emacs tries to interpret &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--greeting&lt;/code&gt; on its own, and rightfully complains that
it has never heard of any such option.  How do we keep Emacs away from our
options?&lt;/p&gt;

&lt;p&gt;The source code of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startup.el&lt;/code&gt;, more precisely the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command-line-1&lt;/code&gt;,
reveals the solution:  Emacs processes all command line arguments &lt;em&gt;immediately&lt;/em&gt;,
in order of their appearance.  After processing, each argument is &lt;em&gt;removed&lt;/em&gt; from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt;, hence the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command-line-args-left&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command-line-args-left&lt;/code&gt; aka &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; is a global variable, we can just
remove all remaining arguments from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; before our script exits:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*- mode: emacs-lisp; lexical-binding: t; -*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello: %S&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el --greeting 'Good morning %s!' 'John Doe'
Hello: (&quot;--greeting&quot; &quot;Good morning %s!&quot; &quot;John Doe&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can also just force Emacs to exit early, which is good style anyway:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*- mode: emacs-lisp; lexical-binding: t; -*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello: %S&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, as a reader of this blog pointed out that is still not enough.
Emacs ignores our custom arguments now, but it will still try to process its
own.  This means that we can’t have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version&lt;/code&gt; argument in our script:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el --version
GNU Emacs 25.0.50.1
Copyright (C) 2014 Free Software Foundation, Inc.
GNU Emacs comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of Emacs
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Emacs printed its own version and exited before our script even saw the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version&lt;/code&gt; argument.  We need to use the standard double-dash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; argument to
separate Emacs options from arguments, so that our script can unaffectedly
process what Emacs now considers mere arguments&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; -- &quot;$@&quot; # -*- mode: emacs-lisp; lexical-binding: t; -*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello: %S&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version&lt;/code&gt; argument in our script, but also the separator, so we
need to remember to drop the first argument:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el --version
Hello: (&quot;--&quot; &quot;--version&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Typically, you’ll process all arguments in a loop, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt;ing each argument as it
is processed.  Initially, you need to pop the first argument to remove the
argument separator:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; -- &quot;$@&quot; # -*- mode: emacs-lisp; lexical-binding: t; -*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello %s!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;options-done&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;; Remove the -- separator&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cond&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;options-done&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;;; Don't process options after &quot;--&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options-done&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--greeting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;;; --greeting=Foo&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\\`--greeting=\\(\\(?:.\\|\n\\)*\\)\\'&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string-prefix-p&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Unknown option: %s&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Missing argument for --greeting!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;names&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Missing names!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nreverse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Emacs doesn’t interfere with our options and arguments any more:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el --greeting='Hello %s' 'John Doe' 'Donald Duck'
Hello John Doe
Hello Donald Duck
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;standard-output-and-input&quot;&gt;Standard output and input&lt;/h2&gt;

&lt;p&gt;In the earlier examples, we used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; to print text in our script. There’s
a little issue, though.  We can’t properly redirect the output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el 'John Doe' 'Donald Duck' &amp;gt; /dev/null
Hello John Doe!
Hello Donald Duck!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; writes to standard &lt;em&gt;error&lt;/em&gt;, but a good script should use standard
output.  For this output stream, there’s another, lesser known family of
functions: &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-print&quot;&gt;print&lt;/a&gt;, &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-prin1&quot;&gt;prin1&lt;/a&gt;, &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-princ&quot;&gt;princ&lt;/a&gt; and friends.  These functions output
“printed representations” of Lisp objects, with varying levels formatting and
quoting.&lt;/p&gt;

&lt;p&gt;For simple printing, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;princ&lt;/code&gt; is the right candidate, since it prints without any
formatting and quoting.  And naturally the unquoted “printed representation” of
a string is… the string itself, so we can use this function to print a list of
names to standard output:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*-emacs-lisp-*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;princ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello %s!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;terpri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unlike &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;princ&lt;/code&gt; doesn’t take a format string, so we need to call
&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html#index-format&quot;&gt;format&lt;/a&gt; ourselves.  &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-terpri&quot;&gt;terpri&lt;/a&gt; is a little utility that just prints a
newline.  The result is as expected, and we can also redirect the output now:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el 'John Doe' 'Donald Duck'
Hello John Doe!
Hello Donald Duck!
$ ./hello.el 'John Doe' 'Donald Duck' &amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have covered standard output now, but what about standard input?  There are
no obvious input functions in Emacs Lisp, but the minibuffer reads from standard
input in batch mode&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*-emacs-lisp-*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ignore-errors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;read-from-minibuffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;princ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello %s!&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;terpri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kill-emacs&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We read lines from standard input with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read-from-minibuffer&lt;/code&gt;, until an empty
string is read, or an error occurs.  EOF, e.g. &lt;kbd&gt;C-d&lt;/kbd&gt; signals an error,
so we can exit the input with &lt;kbd&gt;C-d&lt;/kbd&gt; like in other programs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el
John Doe
Hello John Doe!
Donald Duck
Hello Donald Duck!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This has limitations, though.  We can only read whole lines, and don’t have
direct access to the underlying TTY.  The former doesn’t really matter, but the
latter limits the graphical capabilities of Emacs scripts and rules out all
curses-like stuff or any text UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; This also affects password input in Emacs 24 and older: In these
versions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read-passwd&lt;/code&gt; reads from standard input in batch mode and thus
&lt;strong&gt;exposes&lt;/strong&gt; the password input on the terminal.  Only as of Emacs 25
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read-passwd&lt;/code&gt; is safe to use in batch mode.&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;By default, Emacs’ error reporting is pretty terse, in interactive mode as well
as in batch mode:  It just prints the error message, without any backtraces.
Consider this script, which has a little type error inside:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*-emacs-lisp-*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%S&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cadr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The error message isn’t exactly helpful, though:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el 10 20
Wrong type argument: number-or-marker-p, &quot;10&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In interactive mode, we debug such errors by simply retrying the command after
&lt;kbd&gt;M-x toggle-debug-on-error&lt;/kbd&gt;.  Emacs then enters the debugger and
creates a backtrace if an error occurs.&lt;/p&gt;

&lt;p&gt;In batch mode, we can’t “retry”, though, so we need to enable backtraces right
away, by setting &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#index-debug_002don_002derror&quot;&gt;debug-on-error&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; exec emacs --quick --script &quot;$0&quot; &quot;$@&quot; # -*-emacs-lisp-*-&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;debug-on-error&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%S&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cadr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we get stracktraces for any error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./hello.el 10 20
Debugger entered--Lisp error: (wrong-type-argument number-or-marker-p &quot;10&quot;)
  +(&quot;10&quot; &quot;20&quot;)
  (message &quot;%S&quot; (+ (car argv) (cadr argv)))
  eval-buffer(#&amp;lt;buffer  *load*&amp;gt; nil &quot;/Users/swiesner/Developer/Sandbox/hello.el&quot; nil t)  ; Reading at buffer position 140
  load-with-code-conversion(&quot;/Users/swiesner/Developer/Sandbox/hello.el&quot; &quot;/Users/swiesner/Developer/Sandbox/hello.el&quot; nil t)
  load(&quot;/Users/swiesner/Developer/Sandbox/hello.el&quot; nil t t)
  command-line-1((&quot;-scriptload&quot; &quot;./hello.el&quot; &quot;10&quot; &quot;20&quot;))
  command-line()
  normal-top-level()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;keep-your-hands-clean&quot;&gt;Keep your hands clean&lt;/h2&gt;

&lt;p&gt;As much as we all love Emacs Lisp, it’s not a language that we should use for
scripting or independent programs.  Emacs Lisp is not an independent language
and runtime environment.  It’s tied to Emacs, and Emacs is an interactive text
editor first and foremost.&lt;/p&gt;

&lt;p&gt;I wrote this article partly to help you in the rare cases that you need to write
non-interactive Emacs Lisp programs, eg, a runner for your test suite, but
evne more to show how brittle Emacs Lisp is when used outside Emacs.&lt;/p&gt;

&lt;p&gt;Don’t get your hands dirty.  Instead, just use any of the plenty of other
languages that are available, eg, Python, Ruby or whatever.  If you want a
Lisp, use Common Lisp.  Even better, put your hands on a decent
functional language such as OCaml or Haskell.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;In the early days, we’d muck about with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-init-file&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--batch&lt;/code&gt; and
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--load&lt;/code&gt; to enter noninteractive mode an.e.d load a file. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/a/6259330/355252&quot;&gt;https://stackoverflow.com/a/6259330/355252&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;There is also &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html#index-command_002dline_002dargs&quot;&gt;command-line-args&lt;/a&gt;, but that holds &lt;em&gt;all&lt;/em&gt; Emacs
  options, including those that Emacs already interpreted, and is of little
  use in scripts. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/a/6807133/355252&quot;&gt;https://stackoverflow.com/a/6807133/355252&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/2906967/355252&quot;&gt;https://stackoverflow.com/a/2906967/355252&lt;/a&gt;.  All credits go to SO here,
  I’d never have figured this out by myself. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Basti</name><email>sebastian@swsnr.de</email></author><summary type="html">Emacs script pitfalls Emacs isn’t just an editor, it’s an entire Emacs Lisp interpreter and environment. We can use Emacs Lisp not only to extend and customize our beloved editor, but also to write entire programs and applications. Nic Ferrier’s elnode server is the most ambitious Emacs Lisp application of this sort, but we can start at a smaller scale and try to write our shell scripts and tools with Emacs Lisp. However, it turns out that writing programs in Emacs Lisp is more intricate than it looks at a first glance. Emacs decades-long history as interactive application have left deep marks in Emacs and Emacs Lisp, which make independent noninteractive scripts difficult.</summary></entry></feed>